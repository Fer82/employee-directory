{"version":3,"sources":["components/Header/index.js","components/Table/TBody.js","components/Nav/index.js","utils/API.js","components/Table/index.js","components/Content/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","TBody","users","formatDate","date","dateArray","split","year","join","undefined","name","map","login","picture","phone","email","dob","data-th","src","medium","alt","first","last","href","target","uuid","Nav","handleSearchChange","id","type","placeholder","aria-label","onChange","e","axios","get","Table","state","order","filteredUsers","headings","width","event","heading","dataset","toLowerCase","this","setState","sortedUsers","sort","a","b","localeCompare","console","log","value","filter","filteredList","item","Object","values","indexOf","API","then","results","data","bind","style","data-heading","onClick","handleSort","Component","Content","Fragment","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ec72a56.chunk.js","sourcesContent":["import \"./style.css\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Employee Directory</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./TBody.css\";\r\n\r\nexport default function TBody({ users }) {\r\n  function formatDate(date) {\r\n    const dateArray = date.split(\"-\");\r\n    const year = dateArray[0];\r\n    const month = dateArray[1];\r\n    const dayArray = dateArray[2].split(\"T\");\r\n    const day = dayArray[0];\r\n    const formattedDate = [month, day, year].join(\"-\");\r\n    return formattedDate;\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {users[0] !== undefined && users[0].name !== undefined ? (\r\n        users.map(({ login, name, picture, phone, email, dob }) => {\r\n          return (\r\n            <tr key={login.uuid}>\r\n              <td data-th=\"Image\" className=\"align-middle\">\r\n                <img\r\n                  src={picture.medium}\r\n                  alt={\"profile image for \" + name.first + \" \" + name.last}\r\n                  className=\"img-responsive\"\r\n                />\r\n              </td>\r\n              <td data-th=\"Name\" className=\"name-cell align-middle\">\r\n                {name.first} {name.last}\r\n              </td>\r\n              <td data-th=\"Phone\" className=\"align-middle\">\r\n                {phone}\r\n              </td>\r\n              <td data-th=\"Email\" className=\"align-middle\">\r\n                <a href={\"mailto:\" + email} target=\"__blank\">\r\n                  {email}\r\n                </a>\r\n              </td>\r\n              <td data-th=\"DOB\" className=\"align-middle\">\r\n                {formatDate(dob.date)}\r\n              </td>\r\n            </tr>\r\n          );\r\n        })\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </tbody>\r\n  );\r\n}\r\n","// import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Nav({ handleSearchChange }) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand navbar-light bg-light\">\r\n      <div className=\"navbar-collapse row\" id=\"navbarNav\">\r\n        <div className=\"searchbox\">\r\n          <form className=\"form-inline\">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n              onChange={e => handleSearchChange(e)}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nexport default Nav;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\nimport TBody from \"./TBody\";\r\nimport Nav from \"../Nav/\";\r\nimport API from \"../../utils/API\";\r\nimport \"./style.css\";\r\n\r\nexport default class Table extends Component {\r\n  state = {\r\n    users: [{}],\r\n    order: \"descend\",\r\n    filteredUsers: [{}]\r\n  }\r\n\r\n  headings = [\r\n    { name: \"Image\", width: \"10%\" },\r\n    { name: \"Name\", width: \"10%\" },\r\n    { name: \"Phone\", width: \"20%\" },\r\n    { name: \"Email\", width: \"20%\" },\r\n    { name: \"DOB\", width: \"10%\" }\r\n  ]\r\n\r\n  handleSort(event) {\r\n    let heading = event.target.dataset['heading'].toLowerCase();\r\n\r\n    if (this.state.order === \"descend\") {\r\n      this.setState({\r\n        order: \"ascend\"\r\n      })\r\n    } else {\r\n      this.setState({\r\n        order: \"descend\"\r\n      })\r\n    }\r\n\r\n    const compareFnc = (a, b) => {\r\n      if (this.state.order === \"ascend\") {\r\n        // account for missing values\r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        }\r\n        // numerically\r\n        else if (heading === \"name\") {\r\n          return a[heading].first.localeCompare(b[heading].first);\r\n        } else {\r\n          return a[heading] - b[heading];\r\n        }\r\n      } else {\r\n        // account for missing values\r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        }\r\n        // numerically\r\n        else if (heading === \"name\") {\r\n          return b[heading].first.localeCompare(a[heading].first);\r\n        } else {\r\n          return b[heading] - a[heading];\r\n        }\r\n      }\r\n\r\n    }\r\n    const sortedUsers = this.state.filteredUsers.sort(compareFnc);\r\n    this.setState({ filteredUsers: sortedUsers });\r\n  }\r\n\r\n  handleSearchChange(event) {\r\n    console.log(event.target.value);\r\n    const filter = event.target.value;\r\n    const filteredList = this.state.users.filter(item => {\r\n      // merge data together, then see if user input is anywhere inside\r\n      let values = Object.values(item)\r\n        .join(\"\")\r\n        .toLowerCase();\r\n      return values.indexOf(filter.toLowerCase()) !== -1;\r\n    });\r\n    this.setState({ filteredUsers: filteredList });\r\n  }\r\n\r\n  componentDidMount() {\r\n    API.getUsers().then(results => {\r\n      this.setState({\r\n        users: results.data.results,\r\n        filteredUsers: results.data.results\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Nav handleSearchChange={this.handleSearchChange.bind(this)} />\r\n        <div className=\"data-area\">\r\n          <div className=\"datatable mt-5\">\r\n            <table\r\n              id=\"table\"\r\n              className=\"table table-striped table-hover table-condensed\"\r\n            >\r\n              <thead>\r\n                <tr>\r\n                  {this.headings.map(({ name, width }) => {\r\n                    return (\r\n                      <th\r\n                        className=\"col\"\r\n                        key={name}\r\n                        style={{ width }}\r\n                        data-heading={name}\r\n                        onClick={this.handleSort.bind(this)}\r\n                      >\r\n                        {name}\r\n                        <span className=\"pointer\"></span>\r\n                      </th>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              </thead>\r\n              \r\n              <TBody users={this.state.filteredUsers} />\r\n            </table>\r\n          </div>          \r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport Table from \"../Table/\";\r\nimport \"./style.css\";\r\n\r\nexport default function Content() {\r\n  return (\r\n    <React.Fragment>\r\n      <Table />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import Header from \"./components/Header/\";\r\nimport Content from \"./components/Content/\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Content />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}